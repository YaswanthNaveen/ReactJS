{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nexport default function useOnScreen(ref, rootMargin = \"0px\") {\n  _s();\n\n  const [isVisible, setIsVisible] = useState(false);\n  useEffect(() => {\n    if (ref.current == null) return;\n    const observer = new IntersectionObserver(([entry]) => setIsVisible(entry.isIntersecting), {\n      rootMargin\n    });\n    observer.observe(ref.current);\n    return () => {\n      if (ref.current == null) return;\n      observer.unobserve(ref.current);\n    };\n  }, [ref.current, rootMargin]);\n  return isVisible;\n}\n\n_s(useOnScreen, \"J3yJOyGdBT4L7hs1p1XQYVGMdrY=\");","map":{"version":3,"sources":["C:/Users/yaswa/OneDrive/MyReact/MyReact/useful-custom-hooks/src/14-useOnScreen/useOnScreen.js"],"names":["useEffect","useState","useOnScreen","ref","rootMargin","isVisible","setIsVisible","current","observer","IntersectionObserver","entry","isIntersecting","observe","unobserve"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AAEA,eAAe,SAASC,WAAT,CAAqBC,GAArB,EAA0BC,UAAU,GAAG,KAAvC,EAA8C;AAAA;;AAC3D,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BL,QAAQ,CAAC,KAAD,CAA1C;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIG,GAAG,CAACI,OAAJ,IAAe,IAAnB,EAAyB;AACzB,UAAMC,QAAQ,GAAG,IAAIC,oBAAJ,CACf,CAAC,CAACC,KAAD,CAAD,KAAaJ,YAAY,CAACI,KAAK,CAACC,cAAP,CADV,EAEf;AAAEP,MAAAA;AAAF,KAFe,CAAjB;AAIAI,IAAAA,QAAQ,CAACI,OAAT,CAAiBT,GAAG,CAACI,OAArB;AACA,WAAO,MAAM;AACX,UAAIJ,GAAG,CAACI,OAAJ,IAAe,IAAnB,EAAyB;AACzBC,MAAAA,QAAQ,CAACK,SAAT,CAAmBV,GAAG,CAACI,OAAvB;AACD,KAHD;AAID,GAXQ,EAWN,CAACJ,GAAG,CAACI,OAAL,EAAcH,UAAd,CAXM,CAAT;AAaA,SAAOC,SAAP;AACD;;GAjBuBH,W","sourcesContent":["import { useEffect, useState } from \"react\"\r\n\r\nexport default function useOnScreen(ref, rootMargin = \"0px\") {\r\n  const [isVisible, setIsVisible] = useState(false)\r\n\r\n  useEffect(() => {\r\n    if (ref.current == null) return\r\n    const observer = new IntersectionObserver(\r\n      ([entry]) => setIsVisible(entry.isIntersecting),\r\n      { rootMargin }\r\n    )\r\n    observer.observe(ref.current)\r\n    return () => {\r\n      if (ref.current == null) return\r\n      observer.unobserve(ref.current)\r\n    }\r\n  }, [ref.current, rootMargin])\r\n\r\n  return isVisible\r\n}\r\n"]},"metadata":{},"sourceType":"module"}