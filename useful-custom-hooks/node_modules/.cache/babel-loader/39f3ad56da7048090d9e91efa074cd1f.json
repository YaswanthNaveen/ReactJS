{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback, useRef, useState } from \"react\";\nexport default function useStateWithHistory(defaultValue, {\n  capacity = 10\n} = {}) {\n  _s();\n\n  const [value, setValue] = useState(defaultValue);\n  const historyRef = useRef([value]);\n  const pointerRef = useRef(0);\n  const set = useCallback(v => {\n    const resolvedValue = typeof v === \"function\" ? v(value) : v;\n\n    if (historyRef.current[pointerRef.current] !== resolvedValue) {\n      if (pointerRef.current < historyRef.current.length - 1) {\n        historyRef.current.splice(pointerRef.current + 1);\n      }\n\n      historyRef.current.push(resolvedValue);\n\n      while (historyRef.current.length > capacity) {\n        historyRef.current.shift();\n      }\n\n      pointerRef.current = historyRef.current.length - 1;\n    }\n\n    setValue(resolvedValue);\n  }, [capacity, value]);\n  const back = useCallback(() => {\n    if (pointerRef.current <= 0) return;\n    pointerRef.current--;\n    setValue(historyRef.current[pointerRef.current]);\n  }, []);\n  const forward = useCallback(() => {\n    if (pointerRef.current >= historyRef.current.length - 1) return;\n    pointerRef.current++;\n    setValue(historyRef.current[pointerRef.current]);\n  }, []);\n  const go = useCallback(index => {\n    if (index < 0 || index > historyRef.current.length - 1) return;\n    pointerRef.current = index;\n    setValue(historyRef.current[pointerRef.current]);\n  }, []);\n  return [value, set, {\n    history: historyRef.current,\n    pointer: pointerRef.current,\n    back,\n    forward,\n    go\n  }];\n}\n\n_s(useStateWithHistory, \"kCqDLkupPZ8uzKbJbL/aGigdKNc=\");","map":{"version":3,"sources":["C:/Users/yaswa/OneDrive/MyReact/MyReact/useful-custom-hooks/src/7-useStateWithHistory/useStateWithHistory.js"],"names":["useCallback","useRef","useState","useStateWithHistory","defaultValue","capacity","value","setValue","historyRef","pointerRef","set","v","resolvedValue","current","length","splice","push","shift","back","forward","go","index","history","pointer"],"mappings":";;AAAA,SAASA,WAAT,EAAsBC,MAAtB,EAA8BC,QAA9B,QAA8C,OAA9C;AAEA,eAAe,SAASC,mBAAT,CACbC,YADa,EAEb;AAAEC,EAAAA,QAAQ,GAAG;AAAb,IAAoB,EAFP,EAGb;AAAA;;AACA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBL,QAAQ,CAACE,YAAD,CAAlC;AACA,QAAMI,UAAU,GAAGP,MAAM,CAAC,CAACK,KAAD,CAAD,CAAzB;AACA,QAAMG,UAAU,GAAGR,MAAM,CAAC,CAAD,CAAzB;AAEA,QAAMS,GAAG,GAAGV,WAAW,CACrBW,CAAC,IAAI;AACH,UAAMC,aAAa,GAAG,OAAOD,CAAP,KAAa,UAAb,GAA0BA,CAAC,CAACL,KAAD,CAA3B,GAAqCK,CAA3D;;AACA,QAAIH,UAAU,CAACK,OAAX,CAAmBJ,UAAU,CAACI,OAA9B,MAA2CD,aAA/C,EAA8D;AAC5D,UAAIH,UAAU,CAACI,OAAX,GAAqBL,UAAU,CAACK,OAAX,CAAmBC,MAAnB,GAA4B,CAArD,EAAwD;AACtDN,QAAAA,UAAU,CAACK,OAAX,CAAmBE,MAAnB,CAA0BN,UAAU,CAACI,OAAX,GAAqB,CAA/C;AACD;;AACDL,MAAAA,UAAU,CAACK,OAAX,CAAmBG,IAAnB,CAAwBJ,aAAxB;;AAEA,aAAOJ,UAAU,CAACK,OAAX,CAAmBC,MAAnB,GAA4BT,QAAnC,EAA6C;AAC3CG,QAAAA,UAAU,CAACK,OAAX,CAAmBI,KAAnB;AACD;;AACDR,MAAAA,UAAU,CAACI,OAAX,GAAqBL,UAAU,CAACK,OAAX,CAAmBC,MAAnB,GAA4B,CAAjD;AACD;;AACDP,IAAAA,QAAQ,CAACK,aAAD,CAAR;AACD,GAfoB,EAgBrB,CAACP,QAAD,EAAWC,KAAX,CAhBqB,CAAvB;AAmBA,QAAMY,IAAI,GAAGlB,WAAW,CAAC,MAAM;AAC7B,QAAIS,UAAU,CAACI,OAAX,IAAsB,CAA1B,EAA6B;AAC7BJ,IAAAA,UAAU,CAACI,OAAX;AACAN,IAAAA,QAAQ,CAACC,UAAU,CAACK,OAAX,CAAmBJ,UAAU,CAACI,OAA9B,CAAD,CAAR;AACD,GAJuB,EAIrB,EAJqB,CAAxB;AAMA,QAAMM,OAAO,GAAGnB,WAAW,CAAC,MAAM;AAChC,QAAIS,UAAU,CAACI,OAAX,IAAsBL,UAAU,CAACK,OAAX,CAAmBC,MAAnB,GAA4B,CAAtD,EAAyD;AACzDL,IAAAA,UAAU,CAACI,OAAX;AACAN,IAAAA,QAAQ,CAACC,UAAU,CAACK,OAAX,CAAmBJ,UAAU,CAACI,OAA9B,CAAD,CAAR;AACD,GAJ0B,EAIxB,EAJwB,CAA3B;AAMA,QAAMO,EAAE,GAAGpB,WAAW,CAACqB,KAAK,IAAI;AAC9B,QAAIA,KAAK,GAAG,CAAR,IAAaA,KAAK,GAAGb,UAAU,CAACK,OAAX,CAAmBC,MAAnB,GAA4B,CAArD,EAAwD;AACxDL,IAAAA,UAAU,CAACI,OAAX,GAAqBQ,KAArB;AACAd,IAAAA,QAAQ,CAACC,UAAU,CAACK,OAAX,CAAmBJ,UAAU,CAACI,OAA9B,CAAD,CAAR;AACD,GAJqB,EAInB,EAJmB,CAAtB;AAMA,SAAO,CACLP,KADK,EAELI,GAFK,EAGL;AACEY,IAAAA,OAAO,EAAEd,UAAU,CAACK,OADtB;AAEEU,IAAAA,OAAO,EAAEd,UAAU,CAACI,OAFtB;AAGEK,IAAAA,IAHF;AAIEC,IAAAA,OAJF;AAKEC,IAAAA;AALF,GAHK,CAAP;AAWD;;GAxDuBjB,mB","sourcesContent":["import { useCallback, useRef, useState } from \"react\"\r\n\r\nexport default function useStateWithHistory(\r\n  defaultValue,\r\n  { capacity = 10 } = {}\r\n) {\r\n  const [value, setValue] = useState(defaultValue)\r\n  const historyRef = useRef([value])\r\n  const pointerRef = useRef(0)\r\n\r\n  const set = useCallback(\r\n    v => {\r\n      const resolvedValue = typeof v === \"function\" ? v(value) : v\r\n      if (historyRef.current[pointerRef.current] !== resolvedValue) {\r\n        if (pointerRef.current < historyRef.current.length - 1) {\r\n          historyRef.current.splice(pointerRef.current + 1)\r\n        }\r\n        historyRef.current.push(resolvedValue)\r\n\r\n        while (historyRef.current.length > capacity) {\r\n          historyRef.current.shift()\r\n        }\r\n        pointerRef.current = historyRef.current.length - 1\r\n      }\r\n      setValue(resolvedValue)\r\n    },\r\n    [capacity, value]\r\n  )\r\n\r\n  const back = useCallback(() => {\r\n    if (pointerRef.current <= 0) return\r\n    pointerRef.current--\r\n    setValue(historyRef.current[pointerRef.current])\r\n  }, [])\r\n\r\n  const forward = useCallback(() => {\r\n    if (pointerRef.current >= historyRef.current.length - 1) return\r\n    pointerRef.current++\r\n    setValue(historyRef.current[pointerRef.current])\r\n  }, [])\r\n\r\n  const go = useCallback(index => {\r\n    if (index < 0 || index > historyRef.current.length - 1) return\r\n    pointerRef.current = index\r\n    setValue(historyRef.current[pointerRef.current])\r\n  }, [])\r\n\r\n  return [\r\n    value,\r\n    set,\r\n    {\r\n      history: historyRef.current,\r\n      pointer: pointerRef.current,\r\n      back,\r\n      forward,\r\n      go,\r\n    },\r\n  ]\r\n}\r\n"]},"metadata":{},"sourceType":"module"}