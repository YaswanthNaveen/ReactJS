{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nexport default function useGeolocation(options) {\n  _s();\n\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState();\n  const [data, setData] = useState({});\n  useEffect(() => {\n    const successHandler = e => {\n      setLoading(false);\n      setError(null);\n      setData(e.coords);\n    };\n\n    const errorHandler = e => {\n      setError(e);\n      setLoading(false);\n    };\n\n    navigator.geolocation.getCurrentPosition(successHandler, errorHandler, options);\n    const id = navigator.geolocation.watchPosition(successHandler, errorHandler, options);\n    return () => navigator.geolocation.clearWatch(id);\n  }, [options]);\n  return {\n    loading,\n    error,\n    data\n  };\n}\n\n_s(useGeolocation, \"7Nons7ELO1cCwqLKaMOr265vYzE=\");","map":{"version":3,"sources":["C:/Users/yaswa/OneDrive/MyReact/MyReact/useful-custom-hooks/src/17-useGeolocation/useGeolocation.js"],"names":["useState","useEffect","useGeolocation","options","loading","setLoading","error","setError","data","setData","successHandler","e","coords","errorHandler","navigator","geolocation","getCurrentPosition","id","watchPosition","clearWatch"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AAEA,eAAe,SAASC,cAAT,CAAwBC,OAAxB,EAAiC;AAAA;;AAC9C,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBL,QAAQ,CAAC,IAAD,CAAtC;AACA,QAAM,CAACM,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,EAAlC;AACA,QAAM,CAACQ,IAAD,EAAOC,OAAP,IAAkBT,QAAQ,CAAC,EAAD,CAAhC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMS,cAAc,GAAGC,CAAC,IAAI;AAC1BN,MAAAA,UAAU,CAAC,KAAD,CAAV;AACAE,MAAAA,QAAQ,CAAC,IAAD,CAAR;AACAE,MAAAA,OAAO,CAACE,CAAC,CAACC,MAAH,CAAP;AACD,KAJD;;AAKA,UAAMC,YAAY,GAAGF,CAAC,IAAI;AACxBJ,MAAAA,QAAQ,CAACI,CAAD,CAAR;AACAN,MAAAA,UAAU,CAAC,KAAD,CAAV;AACD,KAHD;;AAIAS,IAAAA,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,CACEN,cADF,EAEEG,YAFF,EAGEV,OAHF;AAKA,UAAMc,EAAE,GAAGH,SAAS,CAACC,WAAV,CAAsBG,aAAtB,CACTR,cADS,EAETG,YAFS,EAGTV,OAHS,CAAX;AAKA,WAAO,MAAMW,SAAS,CAACC,WAAV,CAAsBI,UAAtB,CAAiCF,EAAjC,CAAb;AACD,GArBQ,EAqBN,CAACd,OAAD,CArBM,CAAT;AAuBA,SAAO;AAAEC,IAAAA,OAAF;AAAWE,IAAAA,KAAX;AAAkBE,IAAAA;AAAlB,GAAP;AACD;;GA7BuBN,c","sourcesContent":["import { useState, useEffect } from \"react\"\r\n\r\nexport default function useGeolocation(options) {\r\n  const [loading, setLoading] = useState(true)\r\n  const [error, setError] = useState()\r\n  const [data, setData] = useState({})\r\n\r\n  useEffect(() => {\r\n    const successHandler = e => {\r\n      setLoading(false)\r\n      setError(null)\r\n      setData(e.coords)\r\n    }\r\n    const errorHandler = e => {\r\n      setError(e)\r\n      setLoading(false)\r\n    }\r\n    navigator.geolocation.getCurrentPosition(\r\n      successHandler,\r\n      errorHandler,\r\n      options\r\n    )\r\n    const id = navigator.geolocation.watchPosition(\r\n      successHandler,\r\n      errorHandler,\r\n      options\r\n    )\r\n    return () => navigator.geolocation.clearWatch(id)\r\n  }, [options])\r\n\r\n  return { loading, error, data }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}