{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport useEventListener from \"../13-useEventListener/useEventListener\";\nexport default function useMediaQuery(mediaQuery) {\n  _s();\n\n  const [isMatch, setIsMatch] = useState(false);\n  const [mediaQueryList, setMediaQueryList] = useState(null);\n  useEffect(() => {\n    const list = window.matchMedia(mediaQuery);\n    setMediaQueryList(list);\n    setIsMatch(list.matches);\n  }, [mediaQuery]);\n  useEventListener(\"change\", e => setIsMatch(e.matches), mediaQueryList);\n  return isMatch;\n}\n\n_s(useMediaQuery, \"F+sGAr56svo0Byaq3z7w8qQsJwg=\", false, function () {\n  return [useEventListener];\n});","map":{"version":3,"sources":["C:/Users/yaswa/OneDrive/MyReact/MyReact/useful-custom-hooks/src/16-useMediaQuery/useMediaQuery.js"],"names":["useState","useEffect","useEventListener","useMediaQuery","mediaQuery","isMatch","setIsMatch","mediaQueryList","setMediaQueryList","list","window","matchMedia","matches","e"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,gBAAP,MAA6B,yCAA7B;AAEA,eAAe,SAASC,aAAT,CAAuBC,UAAvB,EAAmC;AAAA;;AAChD,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBN,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM,CAACO,cAAD,EAAiBC,iBAAjB,IAAsCR,QAAQ,CAAC,IAAD,CAApD;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMQ,IAAI,GAAGC,MAAM,CAACC,UAAP,CAAkBP,UAAlB,CAAb;AACAI,IAAAA,iBAAiB,CAACC,IAAD,CAAjB;AACAH,IAAAA,UAAU,CAACG,IAAI,CAACG,OAAN,CAAV;AACD,GAJQ,EAIN,CAACR,UAAD,CAJM,CAAT;AAMAF,EAAAA,gBAAgB,CAAC,QAAD,EAAWW,CAAC,IAAIP,UAAU,CAACO,CAAC,CAACD,OAAH,CAA1B,EAAuCL,cAAvC,CAAhB;AAEA,SAAOF,OAAP;AACD;;GAbuBF,a;UAUtBD,gB","sourcesContent":["import { useState, useEffect } from \"react\"\r\nimport useEventListener from \"../13-useEventListener/useEventListener\"\r\n\r\nexport default function useMediaQuery(mediaQuery) {\r\n  const [isMatch, setIsMatch] = useState(false)\r\n  const [mediaQueryList, setMediaQueryList] = useState(null)\r\n\r\n  useEffect(() => {\r\n    const list = window.matchMedia(mediaQuery)\r\n    setMediaQueryList(list)\r\n    setIsMatch(list.matches)\r\n  }, [mediaQuery])\r\n\r\n  useEventListener(\"change\", e => setIsMatch(e.matches), mediaQueryList)\r\n\r\n  return isMatch\r\n}\r\n"]},"metadata":{},"sourceType":"module"}